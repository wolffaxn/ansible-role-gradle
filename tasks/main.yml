---
- name: assert platform is supported
  assert:
    that:
      - ansible_architecture in ['x86_64']
      - ansible_os_family in ['RedHat']

- name: set os name
  set_fact:
    os_name: linux
  when: ansible_system == 'Linux'

- name: set os architecture
  set_fact:
    os_arch: x64
  when: ansible_architecture == 'x86_64'

- name: ensure download directory exists
  file: path="{{ gradle_download_dir }}" state=directory

- name: download Gradle binary archive (zip)
  get_url:
    url: "{{ gradle_mirror }}/{{ gradle_binary_archive }}"
    dest: "{{ gradle_download_dir }}/{{ gradle_binary_archive }}"
    owner: root
    group: root
    mode: "u=rwx,go=rx"
  register: gradle_redis_get
  until: "'OK' in gradle_redis_get.msg or 'file already exists' in gradle_redis_get.msg"
  delay: "{{ download_delay }}"
  retries: "{{ download_retries }}"

- name: ensure installation directory exists
  file:
    path: "{{ gradle_install_dir }}/gradle-{{ gradle_version }}"
    state: directory
    owner: root
    group: root
    mode: "u=rwx,go=rx"

- name: install 'unzip', if necessary
  package: name=unzip state=present

- name: install Gradle binary archive (zip)
  unarchive:
    src: "{{ gradle_download_dir }}/{{ gradle_binary_archive }}"
    dest: "{{ gradle_install_dir }}"
    owner: root
    group: root
    copy: no

- block:
  - name: ensure '/etc/profile.d' exists
    file: path="/etc/profile.d" state=directory

  - name: export GRADLE_HOME
    template: src=gradle.sh.j2 dest=/etc/profile.d/gradle.sh mode=a+x

  when: gradle_set_gradle_home

- name: remove temporary downloaded files, if requested
  file: path="{{ gradle_download_dir }}/{{ item }}" state=absent
  with_items:
    - "{{ gradle_binary_archive }}"
  ignore_errors: true
  when: gradle_download_cleanup
